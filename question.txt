0:构思与规划
	blog由用户注册修改登录注销与发表构成
	app.js为入口
	在app.js中进行路由分流
	不同的模型设置成模块供控制层（路由）调用
	view层产生的不同的请求由app.js分流向不同的路由控制器，最后由路由控制器调用相应的模块获得输出数据最后定向至指定的view层
1:路由问题
	express提供的路由模块：router = express.Router();
	关于router.get与router.post的区别：get是提交url向服务器获取相应的页面，例如表单的method设置为get，那么浏览器将表单中的内容放在url中向服务器提交，服务器根据url进行处理，
	post是向服务器提交url但是内容是放在http的请求体中，例如将表单的method设置为post那么表单的内容会在请求体中提交给服务器
	router模块通过在回调函数中的req参数获取数据，如：router.post('/',function(res,req,nxt){req.body.arg1});
	关于路由分流，在app.js中可以使用app.use('/', routes);的形式分流，参数1是得到的url，参数2是分流的路由路径
2:mongodb操作
	nodejs要操作数据库必须安装mongodb模块，依赖（package.json）中添加"mongoose": "~3.8.1"：
	关于数据库的开启，提前在某个地方建好data和log文件夹，如：./MongoDB/data和./MongoDB/log，这2个文件夹是用来存放数据和日志用的，然后在cmd中进入数据安装路径的bin目录，如：./MongoDB/bin
	开启方式是 mongod --dbpath x:/MongoDB/data（x指安装的盘符）
	开启后就在当前路径下使用mongo命令操作数据库了
	在nodejs中打开与关闭数据库：
		首先开启数据库
		var Db		 = require('mongodb').Db;
		var Server	 = require('mongodb').Server;
		添加这2个模块，然后打开数据库服务var server = new Server(<数据库路径如：localhost或127.0.0.1之类的>,<数据库监听端口默认27017>,{auto_reconnect:'ture'});
		打开数据库var db = new Db(<数据库名字>,server,{safe:'ture'});
		然后就可以使用db.open(callback(err,db))打开了，在回调函数中可以对数据库进行操作，
		最后db.close()关闭； 
		数据库插入:在上面的回调函数中调用db，db.collection('xxx',{safe:true},callback(err,col))选择文档在回调函数中使用文档，callback(err,col){col.insert(json,{safe:true},callback(err,result));回调函数中的result返回结果
		数据库查找：使用col.findOne(json,callback(err,doc));callback(er,doc){console.log(doc)}，这是查找第一条，col.find(json).toArry(callback(err,doc));
		数据库修改:使用col.update({query:'value'},{$set:{key:value}},{safe:true},callback(err,result)) {safe:true}如果key不存在就新建，false为不新建
		对数组的修改：可以用下标定位修改，但是下标不清楚的时候可以通过定位符$,例子：update({key:value},{$set:{a.$.b:'c'}}),$可以代替查询到的数组的下标，但是$适合1层，多层的就只能提供具体的下标(find后找到具体的位子，或从其他方式提供具体的下标)
		$set属于原子操作,
		$set为更新值，
		$unset删除key,
		$inc对键值加减操作(键值只能为数字)
		$push追加到数组
		$pushAll追加多个值到数组
		$pull从数组中删除一个
		$pop从数组删除最后或第一个
		$rename重命名字段
		数据库删除
		col.remove({});

3:建立模型
	在modles中将处理函数等封装成一个类，通过Module.exports与外部通信，在需要调用的地方就可以直接调用
4:cookie的设置与读取
	res.cookie('cookiename','cookievalue',{ maxAge: 20000,httpOnly:true, path:'/'});这是cookie的设置
	req.cookies.username};这是cookie的获取
5:关于返回值，到处都是异步回调函数，所以如果想取得通过回调函数计算得到的返回值是不可能的，如果非要用他的返回值，只有在回调函数里面调用自己写的回调函数，通过自己的回调函数的参数获取返回值
例子：
function f1()
{
//处理代码
  var date;
	del(arg1,function(date)
	{
		//为date赋值
	});
returne date;
}
 console.log(f1);
 这个时候输出的结果是未定义，因为f1是用异步回调函数处理数据的，在执行del函数的时候，回调函数会来不及执行,del就执行完了，跳到return语句，而date还没来得及通过回调函数赋值。如果要获得date值的话可以如下进行
 function f1(callback)
 {
 //处理代码
 		var date;
 		del(arg1,function(date,callback)
 		{
 			//为date赋值
 			callback(date);
 		})
 })

 function callback(date)
 {
 //对date进行处理
 console.log(date);
 }
6关于mongodb
我在存取的时候遇到个事情就是匹配文档的中数字来定位，但是无论如何匹配不上，后来才发现这个字段在文档中是数字存放的，但是我在匹配的｛id:id｝,我输出变量id发现这个id是字符串，所以没法和数字匹配，以后在存取数字的时候注意mongodb会隐式转换，数字取出来的时候会自动变为字符串。
 路由的实现方式
